import React from 'react';
import './App.css';
import { Button } from 'react-bootstrap';
import Masonry from 'react-masonry-component';
import axios from 'axios';
import ModalWindow from './ModalWindow.js';

let API_URL = process.env.REACT_APP_API_URL;
if (API_URL == null) 
  API_URL = 'http://localhost:8080';


// Render generated spires
class SpiresGenerated extends React.Component {
  render(){
    return(
      <Masonry className="masonry-container">
        {this.props.spires.map(spire => <Spire {...spire} />)}
      </Masonry>
    );
  }
}

class Spire extends React.Component {

  constructor(props){
    super(props);
    this.state = {
      modalShow: false
    }
  }

  showModal = () => { console.log('in showModal()'); this.setState(prevState => ({modalShow: true  })); }
  hideModal = () => { console.log('in hideModal()'); this.setState(prevState => ({modalShow: false })); }

  render() {
    const spire = this.props;
    // const util = require('util');
    // console.log('current spire: '+ util.inspect(spire));
    return(
      <div key={spire.guid} className="tile">
          <a href="#" onClick={this.showModal}>
            <img src={spire.img_file_sm} className="imgstyle" alt={spire.text}/>
          </a>
          <ModalWindow currentspire={spire} show={this.state.modalShow} onHide={this.hideModal} />
      </div>
    );
  }
}

class Form extends React.Component {
  // Generate button
  handleSubmit = async (event) => {
    event.preventDefault();
    const generateEndpoint = API_URL + '/api/generate';
    const resp = await axios.get(generateEndpoint);
    this.props.onSubmit(resp.data);
  }

  render() {
    return(
      <form onSubmit={this.handleSubmit}>
        <Button variant='primary' size='lg' type='submit'>Generate</Button>       
      </form>
    );
  }
}


class App extends React.Component {

  state = {
    spires: [],  // list of inspirations generated by user
    recentspires: [],
    currentspire: {}
  };

  // New generated spire
  addNewSpire = (spireData) => {
    this.setState(prevState => ({
      spires: [...prevState.spires, spireData],
    }));
  };

  //  Recent spires
  handleRecents = (recentData) => {
    this.setState(prevState => ({
      recentspires: recentData
    }));
  };

  loadRecents = async(event) => {
    const recentEndpoint = API_URL + '/api/recents';
    const resp = await axios.get(recentEndpoint);
    this.handleRecents(resp.data);
  };

  //  Get latest spires upon load
  componentDidMount() {
    this.loadRecents();
  }


  render() {
    return (
        <div className="container-fluid bg">
          <div className="container-fluid">
              <Form onSubmit={this.addNewSpire} /> 
          </div>
          <div className="container-fluid">
              <SpiresGenerated spires={this.state.spires} />
          </div>
          <div className="container-fluid">
              <SpiresGenerated spires={this.state.recentspires} />
          </div>
        </div>
    );
  }
}

export default App;
